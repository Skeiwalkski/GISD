<<<<<<< HEAD
}
}
# Output Postcode Data
PLZ <- load("Data/SHP/GEM_Zipcode_Intersections_2015.RData") %>%
as.tibble() # AGS/Postcode-Intersections-Dataset in sf format
# Output Postcode Data
PLZ <- load("Data/SHP/GEM_Zipcode_Intersections_2015.RData") %>%
as_tibble() # AGS/Postcode-Intersections-Dataset in sf format
View(PLZ)
?load
View(PLZ.df)
# Output Postcode Data
PLZ <- load("Data/SHP/GEM_Zipcode_Intersections_2015.RData", ex <- new.env())
View(ex)
# Output Postcode Data
PLZ <- get(load("Data/SHP/GEM_Zipcode_Intersections_2015.RData"))
View(PLZ)
PLZ <- ls(PLZ.df)
View(PLZ.df)
class(PLZ.df)
PLZ <- PLZ.df %>% ungroup()
View(PLZ)
View(Impdata.imputed)
PLZ.df <- PLZ.df %>%
mutate(PLZ5 = case_when(AGS == 03159009 ~ 37127),
PLZ4 = case_when(AGS == 03159009 ~ 3712),
PLZ3 = case_when(AGS == 03159009 ~ 371),
PLZ2 = case_when(AGS == 03159009 ~ 37),
PLZ1 = case_when(AGS == 03159009 ~ 3))
PLZ <- PLZ %>%
mutate(PLZ5 = case_when(AGS == 03159009 ~ 37127),
PLZ4 = case_when(AGS == 03159009 ~ 3712),
PLZ3 = case_when(AGS == 03159009 ~ 371),
PLZ2 = case_when(AGS == 03159009 ~ 37),
PLZ1 = case_when(AGS == 03159009 ~ 3))
PLZ <- PLZ %>%
mutate(AGS = case_when(GEN == "Dransfeld" ~ 03159009
GEN == "Hattorf am Harz" ~ 03159018),
PLZ <- PLZ %>%
mutate(AGS = case_when(GEN == "Dransfeld" ~ 03159009,
GEN == "Hattorf am Harz" ~ 03159018),
PLZ5 = case_when(AGS == 03159009 ~ 37127),
PLZ4 = case_when(AGS == 03159009 ~ 3712),
PLZ3 = case_when(AGS == 03159009 ~ 371),
PLZ2 = case_when(AGS == 03159009 ~ 37),
PLZ1 = case_when(AGS == 03159009 ~ 3))
# Output Postcode Data
get(load("Data/SHP/GEM_Zipcode_Intersections_2015.RData"))
# Output Postcode Data
get(load("Data/SHP/GEM_Zipcode_Intersections_2015.RData"))
# Output Postcode Data
load("Data/SHP/GEM_Zipcode_Intersections_2015.RData")
PLZ <- PLZ.df %>%
ungroup()
PLZ <- PLZ %>%
mutate(AGS = case_when(GEN == Dransfeld ~ 03159009,
GEN == Hattorf am Harz ~ 03159018),
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", 03159009, AGS),
PLZ5 = case_when(AGS == 03159009 ~ 37127),
PLZ4 = case_when(AGS == 03159009 ~ 3712),
PLZ3 = case_when(AGS == 03159009 ~ 371),
PLZ2 = case_when(AGS == 03159009 ~ 37),
PLZ1 = case_when(AGS == 03159009 ~ 3))
# Output Postcode Data
load("Data/SHP/GEM_Zipcode_Intersections_2015.RData")
PLZ <- PLZ.df %>%
ungroup()
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", 03159009, AGS),
PLZ5 = case_when(AGS == 03159009 ~ 37127),
PLZ4 = case_when(AGS == 03159009 ~ 3712),
PLZ3 = case_when(AGS == 03159009 ~ 371),
PLZ2 = case_when(AGS == 03159009 ~ 37),
PLZ1 = case_when(AGS == 03159009 ~ 3))
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", 03159009, AGS),
PLZ5 = ifelse(AGS == 03159009, 37127,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1))
# Output Postcode Data
load("Data/SHP/GEM_Zipcode_Intersections_2015.RData")
PLZ <- PLZ.df %>%
ungroup()
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", 03159009, AGS),
PLZ5 = ifelse(AGS == 03159009, 37127,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1))
# Output Postcode Data
load("Data/SHP/GEM_Zipcode_Intersections_2015.RData")
PLZ <- PLZ.df %>%
ungroup()
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", 03159009, AGS),
AGS = ifelse(GEN == "Hattorf", 03159018, AGS),
PLZ5 = ifelse(AGS == 03159009, 37127,PLZ5),
PLZ5 = ifelse(AGS == 03159018, 37197,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ4 = ifelse(AGS == 03159018, 3719, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ3 = ifelse(AGS == 03159018, 371, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ2 = ifelse(AGS == 03159018, 37, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1),
PLZ1 = ifelse(AGS == 03159018, 3, PLZ1))
# Output Postcode Data
load("Data/SHP/GEM_Zipcode_Intersections_2015.RData")
PLZ <- PLZ.df %>%
ungroup()
class(plz$AGS)
class(PLZ$AGS)
class(PLZ$PLZ5)
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", as.factor(03159009), AGS),
AGS = ifelse(GEN == "Hattorf", as.factor(03159018), AGS),
PLZ5 = ifelse(AGS == 03159009, 37127, PLZ5),
PLZ5 = ifelse(AGS == 03159018, 37197,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ4 = ifelse(AGS == 03159018, 3719, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ3 = ifelse(AGS == 03159018, 371, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ2 = ifelse(AGS == 03159018, 37, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1),
PLZ1 = ifelse(AGS == 03159018, 3, PLZ1))
# Output Postcode Data
load("Data/SHP/GEM_Zipcode_Intersections_2015.RData")
PLZ <- PLZ.df %>%
ungroup()
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", 03159009, as.numeric(AGS)),
AGS = ifelse(GEN == "Hattorf", 03159018, as.numeric(AGS)),
PLZ5 = ifelse(AGS == 03159009, 37127, PLZ5),
PLZ5 = ifelse(AGS == 03159018, 37197,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ4 = ifelse(AGS == 03159018, 3719, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ3 = ifelse(AGS == 03159018, 371, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ2 = ifelse(AGS == 03159018, 37, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1),
PLZ1 = ifelse(AGS == 03159018, 3, PLZ1))
# Output Postcode Data
load("Data/SHP/GEM_Zipcode_Intersections_2015.RData")
PLZ <- PLZ.df %>%
ungroup()
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", 03159009, as.factor(AGS)),
AGS = ifelse(GEN == "Hattorf", 03159018, as.factor(AGS)),
PLZ5 = ifelse(AGS == 03159009, 37127, PLZ5),
PLZ5 = ifelse(AGS == 03159018, 37197,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ4 = ifelse(AGS == 03159018, 3719, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ3 = ifelse(AGS == 03159018, 371, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ2 = ifelse(AGS == 03159018, 37, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1),
PLZ1 = ifelse(AGS == 03159018, 3, PLZ1))
# Output Postcode Data
load("Data/SHP/GEM_Zipcode_Intersections_2015.RData")
PLZ <- PLZ.df %>%
ungroup()
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", 03159009, as.numeric(as.character(AGS))),
AGS = ifelse(GEN == "Hattorf", 03159018, as.numeric(as.character(AGS))),
PLZ5 = ifelse(AGS == 03159009, 37127, PLZ5),
PLZ5 = ifelse(AGS == 03159018, 37197,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ4 = ifelse(AGS == 03159018, 3719, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ3 = ifelse(AGS == 03159018, 371, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ2 = ifelse(AGS == 03159018, 37, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1),
PLZ1 = ifelse(AGS == 03159018, 3, PLZ1))
# Output Postcode Data
load("Data/SHP/GEM_Zipcode_Intersections_2015.RData")
PLZ <- PLZ.df %>%
ungroup()
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", as.numeric(as.character(03159009)), as.numeric(as.character(AGS))),
AGS = ifelse(GEN == "Hattorf", as.numeric(as.character(03159018)), as.numeric(as.character(AGS))),
PLZ5 = ifelse(AGS == 03159009, 37127, PLZ5),
PLZ5 = ifelse(AGS == 03159018, 37197,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ4 = ifelse(AGS == 03159018, 3719, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ3 = ifelse(AGS == 03159018, 371, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ2 = ifelse(AGS == 03159018, 37, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1),
PLZ1 = ifelse(AGS == 03159018, 3, PLZ1))
PLZ <- PLZ.df %>%
ungroup()
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", as.numeric(as.character(03159009)), as.numeric(as.character(AGS))),
AGS = ifelse(GEN == "Hattorf", as.numeric(as.character(03159018)), as.numeric(as.character(AGS))),
PLZ5 = ifelse(AGS == 03159009, 37127, PLZ5),
PLZ5 = ifelse(AGS == 03159018, 37197,PLZ5),
PLZ5 = ifelse(AGS == 15090070, 39628,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ4 = ifelse(AGS == 03159018, 3719, PLZ4),
PLZ4 = ifelse(AGS == 15090070, 3962, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ3 = ifelse(AGS == 03159018, 371, PLZ3),
PLZ3 = ifelse(AGS == 15090070, 396, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ2 = ifelse(AGS == 03159018, 37, PLZ2),
PLZ2 = ifelse(AGS == 15090070, 39, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1),
PLZ1 = ifelse(AGS == 03159018, 3, PLZ1)
PLZ1 = ifelse(AGS == 15090070, 3, PLZ1))
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", as.numeric(as.character(03159009)), as.numeric(as.character(AGS))),
AGS = ifelse(GEN == "Hattorf", as.numeric(as.character(03159018)), as.numeric(as.character(AGS))),
PLZ5 = ifelse(AGS == 03159009, 37127, PLZ5),
PLZ5 = ifelse(AGS == 03159018, 37197,PLZ5),
PLZ5 = ifelse(AGS == 15090070, 39628,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ4 = ifelse(AGS == 03159018, 3719, PLZ4),
PLZ4 = ifelse(AGS == 15090070, 3962, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ3 = ifelse(AGS == 03159018, 371, PLZ3),
PLZ3 = ifelse(AGS == 15090070, 396, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ2 = ifelse(AGS == 03159018, 37, PLZ2),
PLZ2 = ifelse(AGS == 15090070, 39, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1),
PLZ1 = ifelse(AGS == 03159018, 3, PLZ1),
PLZ1 = ifelse(AGS == 15090070, 3, PLZ1))
?add_row
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", as.numeric(as.character(03159009)), as.numeric(as.character(AGS))),
AGS = ifelse(GEN == "Hattorf", as.numeric(as.character(03159018)), as.numeric(as.character(AGS)))) %>%
add_row(AGS = as.numeric(as.character(6412000)), GEN = "Frankfurt am Main", EWZ = 732688, EW_Area = 0) %>%
mutate(PLZ5 = ifelse(AGS == 03159009, 37127, PLZ5),
PLZ5 = ifelse(AGS == 03159018, 37197,PLZ5),
PLZ5 = ifelse(AGS == 15090070, 39628,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ4 = ifelse(AGS == 03159018, 3719, PLZ4),
PLZ4 = ifelse(AGS == 15090070, 3962, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ3 = ifelse(AGS == 03159018, 371, PLZ3),
PLZ3 = ifelse(AGS == 15090070, 396, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ2 = ifelse(AGS == 03159018, 37, PLZ2),
PLZ2 = ifelse(AGS == 15090070, 39, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1),
PLZ1 = ifelse(AGS == 03159018, 3, PLZ1),
PLZ1 = ifelse(AGS == 15090070, 3, PLZ1))
# Output Postcode Data
load("Data/SHP/GEM_Zipcode_Intersections_2015.RData")
PLZ <- PLZ.df %>%
ungroup()
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", as.numeric(as.character(03159009)), as.numeric(as.character(AGS))),
AGS = ifelse(GEN == "Hattorf", as.numeric(as.character(03159018)), as.numeric(as.character(AGS)))) %>%
add_row(AGS = as.numeric(as.character(6412000)), GEN = "Frankfurt am Main", EWZ = 732688, EW_Area = 0,
PLZ5 = 60312,
PLZ4 = 6031,
PLZ3 = 603,
PLZ2 = 60,
PLZ1 = 6) %>%
mutate(PLZ5 = ifelse(AGS == 03159009, 37127, PLZ5),
PLZ5 = ifelse(AGS == 03159018, 37197,PLZ5),
PLZ5 = ifelse(AGS == 15090070, 39628,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ4 = ifelse(AGS == 03159018, 3719, PLZ4),
PLZ4 = ifelse(AGS == 15090070, 3962, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ3 = ifelse(AGS == 03159018, 371, PLZ3),
PLZ3 = ifelse(AGS == 15090070, 396, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ2 = ifelse(AGS == 03159018, 37, PLZ2),
PLZ2 = ifelse(AGS == 15090070, 39, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1),
PLZ1 = ifelse(AGS == 03159018, 3, PLZ1),
PLZ1 = ifelse(AGS == 15090070, 3, PLZ1))
View(PLZ)
# Output Postcode Data
load("Data/SHP/GEM_Zipcode_Intersections_2015.RData")
PLZ <- PLZ.df %>%
ungroup()
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", as.numeric(as.character(03159009)), as.numeric(as.character(AGS))),
AGS = ifelse(GEN == "Hattorf", as.numeric(as.character(03159018)), as.numeric(as.character(AGS))),
AGS = ifelse(GEN == "Göttingen", as.numeric(as.character(03159016)), as.numeric(as.character(AGS)))) %>%
add_row(AGS = as.numeric(as.character(6412000)), GEN = "Frankfurt am Main", EWZ = 732688, EW_Area = 0,
PLZ5 = 60312,
PLZ4 = 6031,
PLZ3 = 603,
PLZ2 = 60,
PLZ1 = 6) %>%
add_row(AGS = as.numeric(as.character(16070029)), GEN = "Ilmenau", EWZ = 26153, EW_Area = 7028,
PLZ5 = 98694,
PLZ4 = 9869,
PLZ3 = 986,
PLZ2 = 98,
PLZ1 = 9) %>%
add_row(AGS = as.numeric(as.character(16070057)), GEN = "Geratal", EWZ = 4523, EW_Area = 4523,
PLZ5 = 99331,
PLZ4 = 9933,
PLZ3 = 993,
PLZ2 = 99,
PLZ1 = 9) %>%
mutate(PLZ5 = ifelse(AGS == 03159009, 37127, PLZ5),
PLZ5 = ifelse(AGS == 03159018, 37197,PLZ5),
PLZ5 = ifelse(AGS == 15090070, 39628,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ4 = ifelse(AGS == 03159018, 3719, PLZ4),
PLZ4 = ifelse(AGS == 15090070, 3962, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ3 = ifelse(AGS == 03159018, 371, PLZ3),
PLZ3 = ifelse(AGS == 15090070, 396, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ2 = ifelse(AGS == 03159018, 37, PLZ2),
PLZ2 = ifelse(AGS == 15090070, 39, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1),
PLZ1 = ifelse(AGS == 03159018, 3, PLZ1),
PLZ1 = ifelse(AGS == 15090070, 3, PLZ1))
# Output Postcode Data
load("Data/SHP/GEM_Zipcode_Intersections_2015.RData")
PLZ <- PLZ.df %>%
ungroup()
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", as.numeric(as.character(03159009)), as.numeric(as.character(AGS))),
AGS = ifelse(GEN == "Hattorf", as.numeric(as.character(03159018)), as.numeric(as.character(AGS))),
AGS = ifelse(GEN == "Göttingen", as.numeric(as.character(03159016)), as.numeric(as.character(AGS)))) %>%
add_row(AGS = as.numeric(as.character(6412000)), GEN = "Frankfurt am Main", EWZ = 732688, EW_Area = 0,
PLZ5 = 60312,
PLZ4 = 6031,
PLZ3 = 603,
PLZ2 = 60,
PLZ1 = 6) %>%
add_row(AGS = as.numeric(as.character(16070029)), GEN = "Ilmenau", EWZ = 26153, EW_Area = 7028,
PLZ5 = 98694,
PLZ4 = 9869,
PLZ3 = 986,
PLZ2 = 98,
PLZ1 = 9) %>%
add_row(AGS = as.numeric(as.character(16070057)), GEN = "Geratal", EWZ = 4523, EW_Area = 4523,
PLZ5 = 99331,
PLZ4 = 9933,
PLZ3 = 993,
PLZ2 = 99,
PLZ1 = 9) %>%
mutate(PLZ5 = ifelse(AGS == 03159009, 37127, PLZ5),
PLZ5 = ifelse(AGS == 03159018, 37197,PLZ5),
PLZ5 = ifelse(AGS == 15090070, 39628,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ4 = ifelse(AGS == 03159018, 3719, PLZ4),
PLZ4 = ifelse(AGS == 15090070, 3962, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ3 = ifelse(AGS == 03159018, 371, PLZ3),
PLZ3 = ifelse(AGS == 15090070, 396, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ2 = ifelse(AGS == 03159018, 37, PLZ2),
PLZ2 = ifelse(AGS == 15090070, 39, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1),
PLZ1 = ifelse(AGS == 03159018, 3, PLZ1),
PLZ1 = ifelse(AGS == 15090070, 3, PLZ1))
for (mykennziffer in c("PLZ2","PLZ3","PLZ4","PLZ5")) {
myname <-  paste0(mykennziffer)
mylabel<-  paste0(mykennziffer)
print(paste("Level:",myname,"Label:",mylabel))
# Datensatzerstellung
outputdata <- Resultdataset
outputdata <- outputdata %>% rename(gemeinde_id = Gemeindekennziffer, year = Jahr, gisd_score = GISD_Score)
outputdata <- outputdata %>% select(AGS=gemeinde_id,year,gisd_score)
outputdata <- left_join(as.data.frame(PLZ.df) %>% ungroup() %>% mutate(AGS=as.numeric(as.character(AGS))),
outputdata,by=c("AGS"), all.x = TRUE)
outputdata <- outputdata %>% mutate(AGS = as.character(AGS),
AGS = ifelse(nchar(AGS)<8,paste0("0",AGS),AGS))
outputdata <- outputdata %>% filter(!is.na(mykennziffer) & !is.na(EW_Area) & !is.na(year) & EW_Area>0)
mycol <- which(mykennziffer %in% names(outputdata))
outputdata <- outputdata %>% group_by(year,AGS)
outputdata <- outputdata %>% mutate(gisd_score = weighted.mean(gisd_score,EW_Area))
#names(outputdata)[names(outputdata)=="year"]<- "JAHR" # Seltsames Problem Name "Jahr"
outputdata <- outputdata %>% group_by_at(vars("year",mykennziffer)) %>%
summarise(gisd_score = weighted.mean(gisd_score,EW_Area), population = sum(EW_Area)) %>%
group_by(year)
outputdata <- outputdata %>%  mutate(gisd_score = round((gisd_score -min(gisd_score ))/(max(gisd_score )-min(gisd_score)), digits=6),
gisd_5 = findInterval(gisd_score, quantile(gisd_score,   probs=0:5/5 , type=9)),
gisd_5 = findInterval(gisd_5, c(1:5)),
gisd_10 = findInterval(gisd_score, quantile(gisd_score, probs=0:10/10 , type=9)),
gisd_10 = findInterval(gisd_10, c(1:10)),
gisd_k = findInterval(gisd_5, c(1,2,5)))
summary(outputdata)
head(outputdata)
ListeJahre <- unique(outputdata$year)
dir.create( paste0("Outfiles"), showWarnings=F)
dir.create( paste0("Outfiles/2022_v03"), showWarnings=F)
dir.create( paste0("Outfiles/2022_v03/Bund/"), showWarnings=F)
mydata <- outputdata %>% ungroup()
write.csv(mydata, paste0("Outfiles/2022_v03/Bund/GISD_Bund_",mylabel,".csv"), row.names=FALSE, fileEncoding="UTF-8")
mydata <- outputdata %>% ungroup()
names(mydata) <- gsub("\\.","_",make.names(names(mydata)))
names(mydata) <- gsub("\\?","oe",names(mydata))
names(mydata) <- gsub("\\?","ae",names(mydata))
names(mydata) <- gsub("\\?","ue",names(mydata))
names(mydata) <- gsub("\\?","ss",names(mydata))
write_dta(mydata, paste0("Outfiles/2022_v03/Bund/GISD_Bund_",mylabel,"_long.dta"))
}
# Output Postcode Data
load("Data/SHP/GEM_Zipcode_Intersections_2015.RData")
PLZ <- PLZ.df %>%
ungroup()
PLZ <- PLZ %>%
mutate(AGS = ifelse(GEN == "Dransfeld", as.numeric(as.character(03159009)), as.numeric(as.character(AGS))),
AGS = ifelse(GEN == "Hattorf", as.numeric(as.character(03159018)), as.numeric(as.character(AGS))),
AGS = ifelse(GEN == "Göttingen", as.numeric(as.character(03159016)), as.numeric(as.character(AGS)))) %>%
add_row(AGS = as.numeric(as.character(6412000)), GEN = "Frankfurt am Main", EWZ = 732688, EW_Area = 0,
PLZ5 = 60312,
PLZ4 = 6031,
PLZ3 = 603,
PLZ2 = 60,
PLZ1 = 6) %>%
add_row(AGS = as.numeric(as.character(16070029)), GEN = "Ilmenau", EWZ = 26153, EW_Area = 7028,
PLZ5 = 98694,
PLZ4 = 9869,
PLZ3 = 986,
PLZ2 = 98,
PLZ1 = 9) %>%
add_row(AGS = as.numeric(as.character(16070057)), GEN = "Geratal", EWZ = 4523, EW_Area = 4523,
PLZ5 = 99331,
PLZ4 = 9933,
PLZ3 = 993,
PLZ2 = 99,
PLZ1 = 9) %>%
mutate(PLZ5 = ifelse(AGS == 03159009, 37127, PLZ5),
PLZ5 = ifelse(AGS == 03159018, 37197,PLZ5),
PLZ5 = ifelse(AGS == 15090070, 39628,PLZ5),
PLZ4 = ifelse(AGS == 03159009, 3712, PLZ4),
PLZ4 = ifelse(AGS == 03159018, 3719, PLZ4),
PLZ4 = ifelse(AGS == 15090070, 3962, PLZ4),
PLZ3 = ifelse(AGS == 03159009, 371, PLZ3),
PLZ3 = ifelse(AGS == 03159018, 371, PLZ3),
PLZ3 = ifelse(AGS == 15090070, 396, PLZ3),
PLZ2 = ifelse(AGS == 03159009, 37, PLZ2),
PLZ2 = ifelse(AGS == 03159018, 37, PLZ2),
PLZ2 = ifelse(AGS == 15090070, 39, PLZ2),
PLZ1 = ifelse(AGS == 03159009, 3, PLZ1),
PLZ1 = ifelse(AGS == 03159018, 3, PLZ1),
PLZ1 = ifelse(AGS == 15090070, 3, PLZ1))
for (mykennziffer in c("PLZ2","PLZ3","PLZ4","PLZ5")) {
myname <-  paste0(mykennziffer)
mylabel<-  paste0(mykennziffer)
print(paste("Level:",myname,"Label:",mylabel))
# Datensatzerstellung
outputdata <- Resultdataset
outputdata <- outputdata %>% rename(gemeinde_id = Gemeindekennziffer, year = Jahr, gisd_score = GISD_Score)
outputdata <- outputdata %>% select(AGS=gemeinde_id,year,gisd_score)
outputdata <- left_join(as.data.frame(PLZ) %>% ungroup() %>% mutate(AGS=as.numeric(as.character(AGS))),
outputdata,by=c("AGS"), all.x = TRUE)
outputdata <- outputdata %>% mutate(AGS = as.character(AGS),
AGS = ifelse(nchar(AGS)<8,paste0("0",AGS),AGS))
outputdata <- outputdata %>% filter(!is.na(mykennziffer) & !is.na(EW_Area) & !is.na(year) & EW_Area>0)
mycol <- which(mykennziffer %in% names(outputdata))
outputdata <- outputdata %>% group_by(year,AGS)
outputdata <- outputdata %>% mutate(gisd_score = weighted.mean(gisd_score,EW_Area))
#names(outputdata)[names(outputdata)=="year"]<- "JAHR" # Seltsames Problem Name "Jahr"
outputdata <- outputdata %>% group_by_at(vars("year",mykennziffer)) %>%
summarise(gisd_score = weighted.mean(gisd_score,EW_Area), population = sum(EW_Area)) %>%
group_by(year)
outputdata <- outputdata %>%  mutate(gisd_score = round((gisd_score -min(gisd_score ))/(max(gisd_score )-min(gisd_score)), digits=6),
gisd_5 = findInterval(gisd_score, quantile(gisd_score,   probs=0:5/5 , type=9)),
gisd_5 = findInterval(gisd_5, c(1:5)),
gisd_10 = findInterval(gisd_score, quantile(gisd_score, probs=0:10/10 , type=9)),
gisd_10 = findInterval(gisd_10, c(1:10)),
gisd_k = findInterval(gisd_5, c(1,2,5)))
summary(outputdata)
head(outputdata)
ListeJahre <- unique(outputdata$year)
dir.create( paste0("Outfiles"), showWarnings=F)
dir.create( paste0("Outfiles/2022_v03"), showWarnings=F)
dir.create( paste0("Outfiles/2022_v03/Bund/"), showWarnings=F)
mydata <- outputdata %>% ungroup()
write.csv(mydata, paste0("Outfiles/2022_v03/Bund/GISD_Bund_",mylabel,".csv"), row.names=FALSE, fileEncoding="UTF-8")
mydata <- outputdata %>% ungroup()
names(mydata) <- gsub("\\.","_",make.names(names(mydata)))
names(mydata) <- gsub("\\?","oe",names(mydata))
names(mydata) <- gsub("\\?","ae",names(mydata))
names(mydata) <- gsub("\\?","ue",names(mydata))
names(mydata) <- gsub("\\?","ss",names(mydata))
write_dta(mydata, paste0("Outfiles/2022_v03/Bund/GISD_Bund_",mylabel,"_long.dta"))
}
DAT <- read.csv("C:7git_projects7GISD7Outfiles72022_v037Bund7GISD_Bund_PLZ5.csv")
DAT <- read.csv("C:7git_projects7GISD7Outfiles/2022_v03/Bund/GISD_Bund_PLZ5.csv")
DAT <- read.csv("C:/git_projects/GISD/Outfiles/2022_v03/Bund/GISD_Bund_PLZ5.csv")
View(DAT)
View(DAT)
DAT <- DAT %>%
filter(PLZ5 == 37073 |
PLZ5 == 37075 |
PLZ5 == 37077 |
PLZ5 == 37079 |
PLZ5 == 37081 |
PLZ5 == 37083 |
PLZ5 == 37085 |
PLZ5 == 37127 |
PLZ5 == 37197 |
PLZ5 == 39628 |
PLZ5 == 98694 |
PLZ5 == 99331)
write.csv(DAT, "S:/OE/FG28/205 Regionale Unterschiede/GISD/Anfragen zum GISD/Geißler_2023/PLZ5_Anfrage.csv")
write.csv(DAT, "S:/OE/FG28/205 Regionale Unterschiede/GISD/Anfragen zum GISD/Geißler_2023/PLZ5_Anfrage.csv")
=======
"NUTS2 Name"=NUTS2name,
"Bundesland"=Bundesland),by="Kreiskennziffer")%>%
left_join(.,Gemeindeverbaende_INKAR, by="GVBKennziffer")
write_rds(id_dataset, paste0("Outfiles/2022/ID_dataset_2022"))
# Basisdaten mit allen Kennziffern und Bevölkerung: Kreisebene
Basedata <- Kreise_INKAR %>% select(Kennziffer=krs19) %>% mutate(Jahr=2019)
# Liste der Variablen generieren
inputdataset <- list.files("Data/INKAR_1998_2019/")
inputdataset <- inputdataset[-c(13,14)];
inputdataset
# Einlesen der einzelnen Excelfiles zu den Daten
for(file in inputdataset){
suppressMessages(myimport <- read_excel(paste0("Data/INKAR_1998_2019/",file), skip = 1, sheet = "Daten"))
names(myimport)[1] <- "Kennziffer"
myimport[2:3] <- NULL
myimport <- myimport %>% gather(key = "Jahr", value = "Value" , -"Kennziffer", convert=T, na.rm = T) %>%
mutate(Kennziffer=as.numeric(as.character(Kennziffer)), Value=as.numeric(Value))
names(myimport)[3] <- strsplit(strsplit(file,"_")[[1]][2],"[.]")[[1]][1]
Basedata <- full_join(Basedata, myimport, by=c("Kennziffer", "Jahr"))
}
rm(inputdataset)
# Liste der Indikatoren erstellen
listofdeterminants <- names(Basedata)[3:length(Basedata)]
# Regionale Tiefe der Indikatoren
ind_level <- c("Gemeindeverband","Gemeindeverband","Kreis", "Gemeindeverband", "Kreis", "Kreis", "Kreis", "Kreis", "Kreis", "Gemeindeverband", "Kreis", "Kreis")
level_table <- cbind(listofdeterminants,ind_level)
# Tabelle der Indikatoren mit regionaler Tiefe
ind_col = c("Indikator","Tiefe des Indikators")
# Basisdaten mit allen Kennziffern mit Bevölkerung (2019): Gemeindverbandsebene
Basedata_Gemeindeverbandsebene <- Basedata %>% select(Kennziffer,Jahr,Arbeitslosigkeit,Beschaeftigtenquote,ErwerbsfaehigeBevoelkerung,Einkommensteuer) %>%
gather(key,value,3:5) %>% filter(!is.na(value)) %>% spread(key,value) %>% filter(Jahr>=1998) %>% rename("Gemeindeverband"=Kennziffer)
# Weiterer Datensatz der Kreisebene, um Daten die auf Gemeindeverbandsebene fehlen mit Kreisinformationen aufzufüllen (vor allem 1998-2000)
Basedata_Kreisebene <- Basedata %>% select(krs15=Kennziffer,Jahr,listofdeterminants) %>%
select(-Arbeitslosigkeit,-Einkommensteuer,-Beschaeftigtenquote, -ErwerbsfaehigeBevoelkerung)%>% filter(Jahr>=1998) %>% rename(Kreis=krs15)
# Daten der verschiedenen Ebenen werden zusammengespielt
Workfile <- as.data.frame(expand.grid("Kennziffer"=Gemeinden_INKAR %>% pull(Kennziffer),"Jahr"=seq(min(Basedata$Jahr):max(Basedata$Jahr)) + min(Basedata$Jahr)-1)) %>% mutate(Kreiskennziffer=floor(as.numeric(Kennziffer)/1000)) %>% as_tibble() %>%
left_join(. , Gemeinden_INKAR,by=c("Kennziffer")) %>%
select(Gemeindekennziffer="Kennziffer",Kreis="Kreiskennziffer",Gemeindeverband=GVBKennziffer,Jahr,Bevoelkerung="Bevölkerung") %>% mutate(Gemeindeverband=as.numeric(Gemeindeverband), Bevoelkerung=as.numeric(Bevoelkerung)) %>%
arrange("Gemeindeverband","Jahr") %>% # Join Metadata
left_join(. , Basedata_Kreisebene,by=c("Kreis","Jahr")) %>%
left_join(. , Basedata_Gemeindeverbandsebene,by=c("Gemeindeverband","Jahr")) %>%
filter(Jahr>=1998)
rm(myimport)
##Anspielen der NUTS-2 Indikatoren
NUTS2 <- id_dataset %>% select(NUTS2) %>% mutate(Jahr = 2019) %>% distinct()
inputdataset <- list.files("Data/INKAR_1998_2019/NUTS2/")
for(file in inputdataset){
suppressMessages(myimport <- read_excel(paste0("Data/INKAR_1998_2019/NUTS2/",file), skip = 1, sheet = "Daten"))
names(myimport)[1] <- "NUTS2"
myimport[2:3] <- NULL
myimport <- myimport %>% gather(key = "Jahr", value = "Value" , -"NUTS2", convert=T, na.rm = T) %>%
mutate(Value=as.numeric(Value))
names(myimport)[3] <- strsplit(strsplit(file,"_")[[1]][2],"[.]")[[1]][1]
NUTS2 <- full_join(NUTS2, myimport, by=c("NUTS2", "Jahr"))
}
NUTS2 <- NUTS2 %>% left_join(id_dataset, by = "NUTS2") %>% mutate(Gemeindeverband = GVBKennziffer) %>% select(Jahr, BevoelkerungmitakadAbschluss, BevoelkerungohneAbschluss, Gemeindeverband)
Workfile <- Workfile %>% left_join(NUTS2, by = c("Gemeindeverband", "Jahr")) %>% distinct()
rm(myimport)
##Anspielen der Arbeitslosigkeit und Erwerbsbevölkerung auf Kreisebene
inputdataset <- list.files("Data/INKAR_1998_2019/Indikatoren_Kreisbene/")
for(file in inputdataset){
suppressMessages(myimport <- read_excel(paste0("Data/INKAR_1998_2019/Indikatoren_Kreisbene/",file), skip = 1, sheet = "Daten"))
names(myimport)[1] <- "Kennziffer"
myimport[2:3] <- NULL
myimport <- myimport %>% gather(key = "Jahr", value = "Value" , -"Kennziffer", convert=T, na.rm = T) %>%
mutate(Kennziffer=as.numeric(as.character(Kennziffer)), Value=as.numeric(Value))
names(myimport)[3] <- strsplit(strsplit(file,"_")[[1]][2],"[.]")[[1]][1]
myimport <- myimport %>% mutate(Kreis = Kennziffer) %>% select(-Kennziffer)
Workfile <- full_join(Workfile, myimport, by=c("Kreis", "Jahr"))
}
## Ersetzen fehlender Daten auf Gemeindeverbandsebene durch Daten der Kreisebene (Jahre 1998 bis 2000)
Workfile <- Workfile %>% mutate(ErwerbsfaehigeBevoelkerung = ifelse(Jahr < 2001, ErwerbsfaehigeBevoelkerungKreis, ErwerbsfaehigeBevoelkerung), Arbeitslosigkeit = ifelse(Jahr < 2001, ArbeitslosigkeitKreis, Arbeitslosigkeit), Beschaeftigtenquote = ifelse(Jahr < 2001, BeschaeftigtenquoteKreis, Beschaeftigtenquote)) %>% select(-ErwerbsfaehigeBevoelkerungKreis, -ArbeitslosigkeitKreis, -BeschaeftigtenquoteKreis)
rm(myimport)
##Erstellen eines Datensatzes mit Bevölkerungslosen Gemeinden und Entfernen dieser für die bevorstehende Imputation und die Faktoranalyse
Gemeinden_ohne_Bevoelkerung <- Workfile %>% filter(Bevoelkerung==0)
write_dta(Gemeinden_ohne_Bevoelkerung, paste0("Outfiles/Gemeinden_ohne_Bevoelkerung.dta"))
rm(Gemeinden_ohne_Bevoelkerung)
#Berechnung der Anteile für Beschäftigte ohne Abschluss, Beschäftigte mit akad. Abschluss und Entfernen SV Beschäftigte (total)
Workfile <- Workfile %>% filter(Bevoelkerung>0) %>% mutate(BeschaeftigteohneAbschluss = round(BeschaeftigteohneAbschluss / SVBeschaeftigte * 100, digits = 2), BeschaeftigtemitakadAbschluss = round(BeschaeftigtemitakadAbschluss / SVBeschaeftigte * 100, digits = 2)) %>%
select(-SVBeschaeftigte)
Basedata <- Basedata %>% select(-SVBeschaeftigte)
Basedata_Kreisebene <- Basedata_Kreisebene %>% select(-SVBeschaeftigte)
level_table <- level_table[-9,]
listofdeterminants <- listofdeterminants[-9]
#Berechnung der Quote für Arbeitslosigkeit und Entfernen Erwerbsfähige Bevölkerung
Workfile <- Workfile %>% filter(Bevoelkerung>0) %>% mutate(Arbeitslosigkeit = ifelse(is.na(ErwerbsfaehigeBevoelkerung),NA,round(Arbeitslosigkeit / ErwerbsfaehigeBevoelkerung * 1000, digits = 2)), Arbeitslosigkeit=ifelse(is.nan(Arbeitslosigkeit),NA,Arbeitslosigkeit),
Arbeitslosigkeit=ifelse(is.infinite(Arbeitslosigkeit),NA,Arbeitslosigkeit)) %>% select(-ErwerbsfaehigeBevoelkerung)
Basedata <- Basedata %>% select(-ErwerbsfaehigeBevoelkerung)
Basedata_Gemeindeverbandsebene <- Basedata_Gemeindeverbandsebene %>% select(-ErwerbsfaehigeBevoelkerung)
level_table <- level_table[-4,]
listofdeterminants <- listofdeterminants[-4]
##Ausschreiben eines Vorab-Workfiles zur Überprüfung der Arbeitslosenquote
Workfile <- Workfile %>% filter(Bevoelkerung>0)
write_dta(Workfile, paste0("Outfiles/2022/Workfile_vorab.dta"))
# Stata-Datensatz rausschreiben
#write_dta(Workfile, paste0("S:/OE/FG28/205 Regionale Unterschiede/GISD/Plausibilitätschecks/workfile.dta"))
# Ende Generierung Basisdatensatz
knitr::kable(level_table, col.names = ind_col, caption = "Liste der Indikatoren")
# Anzahl der Missings für die Indikatoren
listofdeterminants <- names(Workfile)[6:length(Workfile)]
ind_level <- c("Kreis","Kreis","Kreis", "Kreis", "Kreis", "Kreis", "Kreis", "Gemeindeverband", "Gemeindeverband", "Gemeindeverband", "NUTS2", "NUTS2")
level_table <- cbind(listofdeterminants,ind_level)
missings_table = as.data.frame(expand.grid("Jahr"=1998:max(Workfile$Jahr)))
predictors_list = data.frame(Variable=character(), Missings=double(), stringsAsFactors = FALSE)
for (column in level_table[,1]){
for (year in 1998:max(Workfile$Jahr)){
missings_table[year-1997,column] = Workfile %>% filter(Jahr==year, is.na(Workfile[,column])) %>% nrow()
}
predictors_list[nrow(predictors_list) + 1,] = c(column, Workfile %>% filter(is.na(Workfile[,column])) %>% nrow())
}
predictors_list = predictors_list %>% mutate(Missings=as.integer(Missings))
predictors_list = predictors_list[order(predictors_list$Missings),]
predictors_list
Missing_on_Imputationsvars <- Workfile %>%  filter(is.na(Arbeitslosigkeit) |is.na(SchulabgaengerohneAbschluss))
Missing_on_Imputationsvars
# Fälle betrachten: Beispiel 13075152
TimeSeries_for_Missing <- Workfile %>%  filter(Gemeindekennziffer==13075152) %>% arrange(Gemeindekennziffer, Jahr, Bevoelkerung)
TimeSeries_for_Missing
# Fälle betrachten: 16063104
TimeSeries_for_Missing <- Workfile %>%  filter(Gemeindekennziffer==16063104) %>% arrange(Gemeindekennziffer, Jahr, Bevoelkerung)
TimeSeries_for_Missing
#Aufgrund der variierenden Verfübarkeit von Daten und der Unklarheit über die Indikatoren auf Gemeindeebene, werden die Gemeinden vorerst ausgeschlossen.
Workfile <- Workfile %>% filter(Gemeindekennziffer!=16063104)
TimeSeries <- Workfile %>%  filter(Gemeindekennziffer==16063104) %>% select(Gemeindekennziffer, Jahr, listofdeterminants) %>% arrange(Gemeindekennziffer, Jahr)
TimeSeries
#2012
Problemfall_2012 <- Workfile %>% filter(Jahr == 2011 | Jahr == 2012 | Jahr == 2013) %>% filter(Gemeindekennziffer == 1054088) %>% select(Jahr, BeschaeftigteohneAbschluss, BeschaeftigtemitakadAbschluss)
Problemfall_2012
# Interpolation der fehlenden Werte über die Zeitreihe (Mittelwert: Vorjahr, Nachjahr)
Workfile <- Workfile %>%  group_by(Gemeindeverband) %>%
mutate(impu_arblos = ifelse(Bevoelkerung > 0, na_interpolation(Arbeitslosigkeit), Arbeitslosigkeit),
impu_oA = ifelse(Bevoelkerung > 0, na_interpolation(SchulabgaengerohneAbschluss), SchulabgaengerohneAbschluss),
impu_BeschoA = ifelse(Bevoelkerung > 0, na_interpolation(BeschaeftigteohneAbschluss), BeschaeftigteohneAbschluss),
impu_BeschakadA = ifelse(Bevoelkerung > 0, na_interpolation(BeschaeftigtemitakadAbschluss), BeschaeftigtemitakadAbschluss))  %>%
mutate(Arbeitslosigkeit = impu_arblos,
SchulabgaengerohneAbschluss = impu_oA,
BeschaeftigteohneAbschluss = ifelse(Jahr == 2012, impu_BeschoA, BeschaeftigteohneAbschluss),
BeschaeftigtemitakadAbschluss = ifelse(Jahr == 2012, impu_BeschakadA, BeschaeftigtemitakadAbschluss)) %>%
select(-impu_arblos,
-impu_oA,
-impu_BeschoA,
-impu_BeschakadA) %>%
ungroup()
Problemfall_2012 <- Workfile %>% filter(Gemeindekennziffer == 1054088) %>% select(Jahr, BeschaeftigteohneAbschluss, BeschaeftigtemitakadAbschluss)
Problemfall_2012
# Check der Interpolation
TimeSeries <- Workfile %>%  filter(Gemeindekennziffer==13075152) %>% arrange(Gemeindekennziffer, Jahr, Bevoelkerung)
TimeSeries
#Erneut Anzahl der Missings für die Indikatoren
missings_table = as.data.frame(expand.grid("Jahr"=1998:max(Basedata$Jahr)))
predictors_list = data.frame(Variable=character(), Missings=double(), stringsAsFactors = FALSE)
for (column in level_table[,1]){
for (year in 1998:max(Basedata$Jahr)){
missings_table[year-1997,column] = Workfile %>% filter(Jahr==year, is.na(Workfile[,column])) %>% nrow()
}
predictors_list[nrow(predictors_list) + 1,] = c(column, Workfile %>% filter(is.na(Workfile[,column])) %>% nrow())
}
predictors_list = predictors_list %>% mutate(Missings=as.integer(Missings))
predictors_list = predictors_list[order(predictors_list$Missings),]
predictors_list
# Imputation
# Variablenliste für die Regressionsimputation wird erstellt
imputationsliste <- subset(listofdeterminants , !(listofdeterminants %in%
c('Arbeitslosigkeit','SchulabgaengerohneAbschluss',             'SchulabgaengermitHochschulreife')))
# Imputationsdatensatz generieren
Impdata <-  Workfile %>%  filter(Jahr>=1998) %>%
gather(key,value,6:15) %>% mutate(value=ifelse(value<0.00001,NA,value)) %>% spread(key,value)
# Impute_function (NOT FOR GROUPED DATA!)
my_ts_imputer <- function(data,outcome_name){
mydata   <- data %>% group_by(Gemeindekennziffer) %>%
select(Gemeindekennziffer,Jahr,"Outcome"=paste(outcome_name)) %>%
mutate(MEAN=mean(Outcome , na.rm=T)) %>% ungroup()
mymodell <- lm(Outcome ~
I(Jahr*Jahr*MEAN) + I(Jahr*MEAN),
data = mydata  , na.action="na.exclude")
print(mymodell)
mydata %>% select(Outcome) %>% mutate(Imputed = predict(mymodell, newdata =mydata )) %>%
mutate(Outcome=ifelse(is.na(Outcome),Imputed,Outcome)) %>%
mutate(Outcome=ifelse(Outcome<0,0,Outcome)) %>% pull(Outcome)
}
# hier wird der Datensatz mit den imputierten Werten generiert
Impdata.imputed <- Impdata %>%
mutate(Beschaeftigtenquote=my_ts_imputer(.,"Beschaeftigtenquote"),
Bruttoverdienst=my_ts_imputer(.,"Bruttoverdienst"),
BeschaeftigtemitakadAbschluss=my_ts_imputer(.,"BeschaeftigtemitakadAbschluss"),
BeschaeftigteohneAbschluss=my_ts_imputer(.,"BeschaeftigteohneAbschluss"),
Einkommensteuer=my_ts_imputer(.,"Einkommensteuer"),
Haushaltseinkommen=my_ts_imputer(.,"Haushaltseinkommen"),
Schuldnerquote=my_ts_imputer(.,"Schuldnerquote"),
BevoelkerungohneAbschluss=my_ts_imputer(.,"BevoelkerungohneAbschluss"),
BevoelkerungmitakadAbschluss=my_ts_imputer(.,"BevoelkerungmitakadAbschluss"))
# hier wird der Datensatz mit den imputierten Werten generiert
# Result of Imputation
summary(as.data.frame(Impdata.imputed) %>% ungroup()  %>% select(listofdeterminants))
########Imputation für Bevölkerung ohne Abschluss und Bevölkerung mit akademischen Abschluss (NUTS-2-Ebene) für Sensitivitätsanalysen
##Bestehende NAs in den NUTS2-Daten werden werden durch Mittelwerte der Bundesländer ersetzt
Impdata.imputed <- Impdata.imputed %>% mutate(BundeslandKZ = round(Kreis / 1000))
#Imputationsfunktion (Bildungs NUTS-2)
my_ts_imputer_NUTS2 <- function(data,outcome_name){
mydata   <- data %>% group_by(BundeslandKZ) %>%
select(BundeslandKZ,Jahr,"Outcome"=paste(outcome_name)) %>%
mutate(MEAN=mean(Outcome , na.rm=T)) %>% ungroup()
mymodell <- lm(Outcome ~
I(Jahr*Jahr*MEAN) + I(Jahr*MEAN),
data = mydata  , na.action="na.exclude")
mydata %>% select(Outcome) %>% mutate(Imputed = predict(mymodell, newdata =mydata )) %>%
mutate(Outcome=ifelse(is.na(Outcome),Imputed,Outcome)) %>%
mutate(Outcome=ifelse(Outcome<0,0,Outcome)) %>% pull(Outcome)
}
#Imputation (Bildungs NUTS-2)
Impdata.imputed <- Impdata.imputed %>%
mutate(BevoelkerungohneAbschluss=my_ts_imputer_NUTS2(.,"BevoelkerungohneAbschluss"),
BevoelkerungmitakadAbschluss=my_ts_imputer_NUTS2(.,"BevoelkerungmitakadAbschluss"))
summary(as.data.frame(Impdata.imputed) %>% ungroup()  %>% select(listofdeterminants))
Impdata.imputed <- Impdata.imputed %>% select(-BundeslandKZ)
########Imputation für Schulabgänger mit Hochschulreife für Sensitivitätsanalysen
# Die Schulabgänger mit Hochschulreife werden separat imputiert und durch alle Kovariaten informiert
#Imputationsfunktion
my_ts_imputer <- function(data,outcome_name){
mydata   <- data %>%
select(Gemeindekennziffer,Jahr,Arbeitslosigkeit,SchulabgaengerohneAbschluss,Beschaeftigtenquote,Bruttoverdienst,BeschaeftigtemitakadAbschluss,BeschaeftigteohneAbschluss,Einkommensteuer,Haushaltseinkommen,"Outcome"=paste(outcome_name)) %>% mutate(MEAN=mean(Outcome , na.rm=T))
mymodell <- lm(Outcome ~
I(Jahr*Jahr*MEAN) + I(Jahr*MEAN) + Arbeitslosigkeit +
SchulabgaengerohneAbschluss + Beschaeftigtenquote + Bruttoverdienst + BeschaeftigtemitakadAbschluss + BeschaeftigteohneAbschluss + Einkommensteuer + Haushaltseinkommen ,
data = mydata  , na.action="na.exclude")
mydata %>% select(Outcome) %>% mutate(Imputed = predict(mymodell, newdata =mydata )) %>%
mutate(Outcome=ifelse(is.na(Outcome),Imputed,Outcome)) %>%
mutate(Outcome=ifelse(Outcome<0,0,Outcome)) %>% pull(Outcome)
}
#Imputation
Impdata.imputed <- Impdata.imputed %>% mutate(
SchulabgaengermitHochschulreife=my_ts_imputer(.,"SchulabgaengermitHochschulreife")
)
summary(Impdata.imputed$SchulabgaengermitHochschulreife)
#Ausgabe der fehlenden Werte
missings_table = as.data.frame(expand.grid("Jahr"=1998:max(Basedata$Jahr)))
predictors_list = data.frame(Variable=character(), Missings=double(), stringsAsFactors = FALSE)
for (column in level_table[,1]){
for (year in 1998:max(Basedata$Jahr)){
missings_table[year-1997,column] = Impdata.imputed %>% filter(Jahr==year, is.na(Impdata.imputed[,column])) %>% nrow()
}
predictors_list[nrow(predictors_list) + 1,] = c(column, Impdata.imputed %>% filter(is.na(Impdata.imputed[,column])) %>% nrow())
}
predictors_list = predictors_list %>% mutate(Missings=as.integer(Missings))
predictors_list = predictors_list[order(predictors_list$Missings),]
predictors_list
#Missing betrachten
Missing_on_Imputationsvars <- Impdata.imputed %>%  filter(is.na(Arbeitslosigkeit))
Missing_on_Imputationsvars
Problemfall_2012 <- Impdata.imputed %>% filter(Gemeindekennziffer == 1054088) %>% select(Jahr, BeschaeftigteohneAbschluss, BeschaeftigtemitakadAbschluss)
Problemfall_2012
# Fälle betrachten: 16063104
TimeSeries_for_Missing <- Impdata.imputed %>%  filter(Gemeindekennziffer==16071103) %>% arrange(Gemeindekennziffer, Jahr, Bevoelkerung)
TimeSeries_for_Missing
#Aufgrund der variierenden Verfübarkeit von Daten und der Unklarheit über die Indikatoren auf Gemeindeebene, werden die Gemeinden vorerst ausgeschlossen.
Impdata.imputed <- Impdata.imputed %>% filter(Gemeindekennziffer!=16071103)
TimeSeries <- Impdata.imputed %>%  filter(Gemeindekennziffer==16071103) %>% select(Gemeindekennziffer, Jahr, listofdeterminants) %>% arrange(Gemeindekennziffer, Jahr)
TimeSeries
write_rds(Impdata.imputed, paste0("Outfiles/2022/Impdata_check_voradj.rds"))
# Die Bildungsvariablen Anteil der Schulabgänger mit Hochschulreife und Anteil der Schulabgänger ohne Abschluss werden als Quote relativ zur Gesamtanzahl der Schulabgänger berechnet. Durch die G8-Schulreformen und ihre Zurücknahme ergeben sich deshalb in den Bundesländern zu verschiedenen Zeitpunkten Verzerrungen.
# Diese Verzerrung wird über eine Regressionsmodell herausgerechnet.
# Generierung der Variablen zur Identifikation der Reformen (G8), Rückker zu G9 (SN_KA) und abweichender Anerkennung von Abschlüssen für GymnasiastInnen (THvor2004).
Impdata.imputed <- Impdata.imputed %>%
mutate(G8 = case_when(Kreis < 2000 & Jahr >= 2016 & Jahr <= 2028 ~ 1,
Kreis > 1999 & Kreis < 3000 & Jahr >= 2010 ~ 1,
Kreis > 2999 & Kreis < 4000 & Jahr >= 2011 & Jahr <= 2024 ~ 1,
Kreis > 3999 & Kreis < 5000 & Jahr >= 2012 ~ 1,
Kreis > 4999 & Kreis < 6000 & Jahr >= 2013 & Jahr <= 2028 ~ 1,
Kreis > 5999 & Kreis < 7000 & Jahr >= 2013 & Jahr <= 2022 ~ 1,
Kreis > 7999 & Kreis < 9000 & Jahr >= 2012 ~ 1,
Kreis > 8999 & Kreis < 10000 & Jahr >= 2011 & Jahr <= 2026 ~ 1,
Kreis > 9999 & Kreis < 11000 & Jahr >= 2009 ~ 1,
Kreis > 10999 & Kreis < 12000 & Jahr >= 2012 ~ 1,
Kreis > 11999 & Kreis < 13000 & Jahr >= 2012 ~ 1,
Kreis > 12999 & Kreis < 14000 & Jahr >= 2008 ~ 1,
Kreis > 13999 & Kreis < 15000 ~ 1,
Kreis > 14999 & Kreis < 16000 & Jahr <= 2001 & Jahr >= 2007 ~ 1,
Kreis > 15999 ~ 1),
THvor2004 = ifelse(Jahr < 2004 & Kreis > 15999, 1, 0))
Impdata.imputed$G8[is.na(Impdata.imputed$G8)] = 0
Impdata.imputed$THvor2004[is.na(Impdata.imputed$THvor2004)] = 0
Impdata.imputed <- Impdata.imputed %>%
mutate(G8_jahr = case_when(Kreis < 2000 & Jahr == 2016 ~ 1,
Kreis > 1999 & Kreis < 3000 & Jahr == 2010 ~ 1,
Kreis > 2999 & Kreis < 4000 & Jahr == 2011 ~ 1,
Kreis > 3999 & Kreis < 5000 & Jahr == 2012 ~ 1,
Kreis > 4999 & Kreis < 6000 & Jahr == 2013 ~ 1,
Kreis > 5999 & Kreis < 7000 & Jahr == 2013 ~ 1,
Kreis > 7999 & Kreis < 9000 & Jahr == 2012 ~ 1,
Kreis > 8999 & Kreis < 10000 & Jahr == 2011 ~ 1,
Kreis > 9999 & Kreis < 11000 & Jahr == 2009 ~ 1,
Kreis > 10999 & Kreis < 12000 & Jahr == 2012 ~ 1,
Kreis > 11999 & Kreis < 13000 & Jahr == 2012 ~ 1,
Kreis > 12999 & Kreis < 14000 & Jahr == 2008 ~ 1,
Kreis > 14999 & Kreis < 16000 & Jahr == 2007 ~ 1),
SN_KA = ifelse(Jahr == 2001 & Kreis > 14999 & Kreis < 16000, 1, 0))
Impdata.imputed$G8_jahr[is.na(Impdata.imputed$G8_jahr)] = 0
Impdata.imputed$SN_KA[is.na(Impdata.imputed$SN_KA)] = 0
# Anpassung: Ersetzen der Werte in den von Verzerrungen betroffenen Fälle durch um Reformeffekte bereinigte Quoten.
adj_G8_jahr <- function(data,outcome_name){
mydata   <- data %>%
group_by(Gemeindekennziffer) %>%
select(Gemeindekennziffer, Jahr, G8_jahr, SN_KA, THvor2004, "Outcome"=paste(outcome_name)) %>%
mutate(MEAN=mean(Outcome , na.rm=T)) %>% ungroup()
mymodell2 <- lm(Outcome ~
I(Jahr*Jahr*MEAN) + I(Jahr*MEAN) + G8_jahr + SN_KA + THvor2004, data = mydata  , na.action="na.exclude")
print(mymodell2)
mydata %>% mutate(coef = summary(mymodell2)$coefficients[4,1], coef_SH = summary(mymodell2)$coefficients[5,1], coef_TH = summary(mymodell2)$coefficients[6,1]) %>%
mutate(Outcome = ifelse(G8_jahr == 1, Outcome - coef, Outcome), Outcome = ifelse(SN_KA == 1, Outcome - coef_SH, Outcome), Outcome = ifelse(THvor2004 == 1, Outcome - coef_TH, Outcome)) %>%
pull(Outcome)
}
Impdata.imputed <- Impdata.imputed %>%
mutate(SchulabgaengermitHochschulreife_adj = adj_G8_jahr(.,"SchulabgaengermitHochschulreife"),
SchulabgaengerohneAbschluss_adj = adj_G8_jahr(.,"SchulabgaengerohneAbschluss"))
#Adjustmentprüfung
hist_over_SchulabgaengerohneAbschluss <- ggplot() +
geom_histogram(data = Impdata.imputed[Impdata.imputed[,"G8_jahr"]==0,], aes_string(x = "SchulabgaengerohneAbschluss"), fill ='darkblue')  +
geom_histogram(data = Impdata.imputed[Impdata.imputed[,"G8_jahr"]==1,], aes_string(x = "SchulabgaengerohneAbschluss"), fill ='darkred')
hist_over_SchulabgaengerohneAbschluss_adj <- ggplot() +
geom_histogram(data = Impdata.imputed[Impdata.imputed[,"G8_jahr"]==0,], aes_string(x = "SchulabgaengerohneAbschluss_adj"), fill ='darkblue')  +
geom_histogram(data = Impdata.imputed[Impdata.imputed[,"G8_jahr"]==1,], aes_string(x = "SchulabgaengerohneAbschluss_adj"), fill ='darkred')
hist_over_SchulabgaengerohneAbschluss
hist_over_SchulabgaengerohneAbschluss_adj
Impdata.imputed <- Impdata.imputed %>% mutate(Messaenderung_Besch = ifelse(Jahr < 2013, 1, 0))
hist_over_vor_messanpassung <- ggplot() +
geom_histogram(data = Impdata.imputed[Impdata.imputed[,"Jahr"]<2013,], aes_string(x = "BeschaeftigteohneAbschluss"), fill ='darkblue')  +
geom_histogram(data = Impdata.imputed[Impdata.imputed[,"Jahr"]>=2013,], aes_string(x = "BeschaeftigteohneAbschluss"), fill ='darkred')
Messaenderung <- function(data,outcome_name){
mydata   <- data %>%
select(Gemeindekennziffer, Jahr, Messaenderung_Besch, "Outcome"=paste(outcome_name)) %>%
mutate(MEAN=mean(Outcome , na.rm=T)) %>% ungroup()
mymodell_Messaenderung <- lm(Outcome ~
I(Jahr*Jahr*MEAN) + I(Jahr*MEAN) + Messaenderung_Besch, data = mydata  , na.action="na.exclude")
print(mymodell_Messaenderung)
summary(mymodell_Messaenderung)$coefficients[4,1]
mydata <- mydata %>%
mutate(coef = summary(mymodell_Messaenderung)$coefficients[4,1]) %>%
mutate(Outcome = ifelse(Messaenderung_Besch == 1, Outcome - coef, Outcome)) %>%
pull(Outcome)
}
Impdata.imputed <- Impdata.imputed %>%
mutate(BeschaeftigteohneAbschluss_adj = Messaenderung(.,"BeschaeftigteohneAbschluss"),
BeschaeftigtemitakadAbschluss_adj = Messaenderung(.,"BeschaeftigtemitakadAbschluss"))
#Adjustmentprüfung
hist_over_nach_messanpassung <- ggplot() +
geom_histogram(data = Impdata.imputed[Impdata.imputed[,"Jahr"]<2013,], aes_string(x = "BeschaeftigteohneAbschluss_adj"), fill ='darkblue')  +
geom_histogram(data = Impdata.imputed[Impdata.imputed[,"Jahr"]>=2013,], aes_string(x = "BeschaeftigteohneAbschluss_adj"), fill ='darkred')
hist_over_vor_messanpassung
hist_over_nach_messanpassung
Impdata.imputed <- Impdata.imputed %>% mutate(OW = ifelse(Kreis < 11000, 0, 1))
# mydata   <- Impdata.imputed %>%
#    select(Gemeindekennziffer, Jahr, OW, BeschaeftigteohneAbschluss_adj) %>%
#    mutate(Jahr_Dummy = as.factor(Jahr)) %>% ungroup()
#
#    mymodell_ow <- lm(BeschaeftigteohneAbschluss_adj ~ Jahr_Dummy + relevel(Jahr_Dummy, ref = "2012") * OW, data = #mydata, na.action="na.exclude")
#
#    summary(mymodell_ow)
#Adjustmentprüfung
hist_over_westost <- ggplot() +
geom_histogram(data = Impdata.imputed[Impdata.imputed[,"Kreis"]<11000,], aes_string(x = "BeschaeftigteohneAbschluss_adj"), fill ='darkblue')  +
geom_histogram(data = Impdata.imputed[Impdata.imputed[,"Kreis"]>=11000,], aes_string(x = "BeschaeftigteohneAbschluss_adj"), fill ='darkred')
OW <- function(data,outcome_name){
mydata   <- data %>%
select(Gemeindekennziffer, Jahr, OW, "Outcome"=paste(outcome_name)) %>%
mutate(Jahr_Dummy = as.factor(Jahr)) %>% ungroup()
mymodell_ow <- lm(Outcome ~ Jahr_Dummy + relevel(Jahr_Dummy, ref = "2012") * OW, data = mydata, na.action="na.exclude")
print(mymodell_ow)
summary(mymodell_ow)$coefficients[23,1]
mydata %>% mutate(coef = summary(mymodell_ow)$coefficients[23,1]) %>%
mutate(Outcome = ifelse(OW == 1, Outcome - coef, Outcome)) %>%
pull(Outcome)
}
Impdata.imputed <- Impdata.imputed %>%
mutate(BeschaeftigteohneAbschluss_adj = OW(.,"BeschaeftigteohneAbschluss_adj"))
hist_over_westost_adj <- ggplot() +
geom_histogram(data = Impdata.imputed[Impdata.imputed[,"Kreis"]<11000,], aes_string(x = "BeschaeftigteohneAbschluss_adj"), fill ='darkblue')  +
geom_histogram(data = Impdata.imputed[Impdata.imputed[,"Kreis"]>=11000,], aes_string(x = "BeschaeftigteohneAbschluss_adj"), fill ='darkred')
hist_over_westost
hist_over_westost_adj
Verbraucherpreisindex <- data.frame(Jahr = c(1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020),
VBindex =  c(78.3, 78.8 , 79.9, 81.5, 82.6, 83.5, 84.9, 86.2, 87.6, 89.6, 91.9, 92.2, 93.2, 95.2, 97.1, 98.5, 99.5, 100, 100.5, 102, 103.8, 105.3, 105.8))
Impdata.imputed <- Impdata.imputed %>% left_join(Verbraucherpreisindex, by = "Jahr")
Impdata.imputed <- Impdata.imputed %>% mutate(Einkommensteuer = Einkommensteuer / VBindex * 100, Haushaltseinkommen = Haushaltseinkommen / VBindex * 100, Bruttoverdienst = Bruttoverdienst / VBindex * 100)
Impdata.imputed <- Impdata.imputed %>% mutate(Einkommensteuer_ln = ifelse(Einkommensteuer==0, 0.75, log(Einkommensteuer)))
Impdata.imputed <- Impdata.imputed %>% mutate(Haushaltseinkommen_ln = log(Haushaltseinkommen))
Impdata.imputed <- Impdata.imputed %>% mutate(Bruttoverdienst_ln = log(Bruttoverdienst))
# Stata-Datensatz rausschreiben
stata_data <- Impdata.imputed %>%
mutate(SchulabgmitAbi_adj = SchulabgaengermitHochschulreife_adj, BeschaeftigteohneAbschlussadj = BeschaeftigteohneAbschluss_adj, BeschaeftigtemitakadAbschlussadj = BeschaeftigtemitakadAbschluss_adj) %>%
select(-SchulabgaengermitHochschulreife_adj,
-BeschaeftigteohneAbschluss_adj,
-BeschaeftigtemitakadAbschluss_adj)
write_dta(stata_data, paste0("Outfiles/2022/Stata/Impdata_check_2019.dta"))
rm(stata_data)
# RDS-Datensatz rausschreiben
write_rds(Impdata.imputed, paste0("Outfiles/2022/Impdata_check.rds"))
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
library("tidyr")
library(bookdown)
library(knitr)
home <- getwd()
setwd(home)
id_data <- readRDS("Outfiles/2022/ID_dataset_2019")
View(id_data)
View(id_data)
Gemeinden <- id_data %>% select(Bevölkerung, Gemeindekennziffer) %>% group_by(Gemeindekennziffer) %>% mutate(Bev = sum(Bevölkerung)*100) %>% ungroup() %>% select(-Bevölkerung) %>% unique() %>% filter(Bev > 0)
GVB <- id_data %>% select(Bevölkerung, GVBKennziffer) %>% group_by(GVBKennziffer) %>% mutate(Bev = sum(Bevölkerung)*100) %>% ungroup() %>% select(-Bevölkerung) %>% unique() %>% filter(Bev > 0)
Kreis <- id_data %>% select(Bevölkerung, Kreiskennziffer) %>% group_by(Kreiskennziffer) %>% mutate(Bev = sum(Bevölkerung)*100) %>% ungroup() %>% select(-Bevölkerung) %>% unique() %>% filter(Bev > 0)
ROR <- id_data %>% select(Bevölkerung, `Raumordnungsregion Nr`) %>% group_by(`Raumordnungsregion Nr`) %>% mutate(Bev = sum(Bevölkerung)*100) %>% ungroup() %>% select(-Bevölkerung) %>% unique() %>% filter(Bev > 0)
NUTS2 <- id_data %>% select(Bevölkerung, NUTS2) %>% group_by(NUTS2) %>% mutate(Bev = sum(Bevölkerung)*100) %>% ungroup() %>% select(-Bevölkerung) %>% unique() %>% filter(Bev > 0)
Tabelle_Bev <- cbind("Ebene" = "Gemeinden", "Anzahl" = nrow(Gemeinden), "Mittlere Bevölkerungszahl" = round(mean(Gemeinden$Bev)), "Minimum" = round(min(Gemeinden$Bev)), "Maximum" = round(max(Gemeinden$Bev)))
Tabelle_Bev <- rbind(Tabelle_Bev, cbind("Ebene" = "Gemeindeverbände (GVB)", "Anzahl" = nrow(GVB), "Mittlere Bevölkerungszahl" = round(mean(GVB$Bev)), "Minimum" = round(min(GVB$Bev)), "Maximum" = round(max(GVB$Bev))))
Tabelle_Bev <- rbind(Tabelle_Bev, cbind("Ebene" = "Kreise und kreisfreie Städte (Kreise)", "Anzahl" = nrow(Kreis), "Mittlere Bevölkerungszahl" = round(mean(Kreis$Bev)), "Minimum" = round(min(Kreis$Bev)), "Maximum" = round(max(Kreis$Bev))))
Tabelle_Bev <- rbind(Tabelle_Bev, cbind("Ebene" = "Raumordnungsregionen (ROR)", "Anzahl" = nrow(ROR), "Mittlere Bevölkerungszahl" = round(mean(ROR$Bev)), "Minimum" = round(min(ROR$Bev)), "Maximum" = round(max(ROR$Bev))))
Tabelle_Bev <- rbind(Tabelle_Bev, cbind("Ebene" = "NUTS-2", "Anzahl" = nrow(NUTS2), "Mittlere Bevölkerungszahl" = round(mean(NUTS2$Bev)), "Minimum" = round(min(NUTS2$Bev)), "Maximum" = round(max(NUTS2$Bev))))
kable(Tabelle_Bev, caption = "Räumliche Gliederungsebenen in Deutschland und ihre Bevölkerungszahlen")
##an Niels: Komplettes Script ausführen, Tabelle in Console am Ende gibt die Werte aus
###Daten Einlesen
dat_2022 <- read.csv("Outfiles/2022/Bund/Gemeinde/Gemeinde.csv") %>% mutate(Kreis = floor(Gemeindekennziffer/1000))
Lebenserwartung_Frauen <- read_excel("Data/Lebenserwartung/Lebenserwartung_female_13_17.xlsx", skip = 1, sheet = "Daten")
names(Lebenserwartung_Frauen)[1] <- "Kreis"
Lebenserwartung_Frauen[2:3] <- NULL
Lebenserwartung_Frauen <- Lebenserwartung_Frauen %>% gather(key = "Jahr", value = "Value" , -"Kreis", convert=T, na.rm = T) %>% mutate(Kreis = as.numeric(Kreis))
Lebenserwartung_Frauen <- Lebenserwartung_Frauen %>% filter(Jahr > 2014) %>% group_by(Kreis) %>% mutate(Lebenserwartung_Frauen_2016 = mean(Value)) %>% ungroup() %>% filter(Jahr == 2016) %>% select(Kreis,Lebenserwartung_Frauen_2016)
Lebenserwartung_Männer <- read_excel("Data/Lebenserwartung/Lebenserwartung_male_13_17.xlsx", skip = 1, sheet = "Daten")
names(Lebenserwartung_Männer)[1] <- "Kreis"
Lebenserwartung_Männer[2:3] <- NULL
Lebenserwartung_Männer <- Lebenserwartung_Männer %>% gather(key = "Jahr", value = "Value" , -"Kreis", convert=T, na.rm = T) %>% mutate(Kreis = as.numeric(Kreis))
Lebenserwartung_Männer <- Lebenserwartung_Männer %>% filter(Jahr > 2014) %>% group_by(Kreis) %>% mutate(Lebenserwartung_Männer_2016 = mean(Value)) %>% ungroup() %>% filter(Jahr == 2016) %>% select(Kreis,Lebenserwartung_Männer_2016)
dat_Lebenserwartung <- Lebenserwartung_Frauen %>% left_join(Lebenserwartung_Männer, by = "Kreis")
dat_Leberw_2022 <- dat_2022 %>% filter(Jahr == 2016) %>% left_join(dat_Lebenserwartung, by = "Kreis") %>% distinct(Kreis, .keep_all = TRUE) %>% unique()
###Modelle erstellen
mod_Frauen <- lm(Lebenserwartung_Frauen_2016 ~ GISD_Score, data = dat_Leberw_2022)
summary(mod_Frauen)
mod_Männer <- lm(Lebenserwartung_Männer_2016 ~ GISD_Score, data = dat_Leberw_2022)
summary(mod_Frauen)
#Frauen
Frauen_high <- predict(mod_Frauen, data.frame(GISD_Score = 1))
Frauen_high
Frauen_low <- predict(mod_Frauen, data.frame(GISD_Score = 0))
Frauen_low
SDI_Frauen <- Frauen_low - Frauen_high
SDI_Frauen
Rsqu_Frauen <- summary(mod_Frauen)$r.squared
Rsqu_Frauen
#Männer
Männer_high <- predict(mod_Männer, data.frame(GISD_Score = 1))
Männer_high
Männer_low <- predict(mod_Männer, data.frame(GISD_Score = 0))
Männer_low
SDI_Männer <- Männer_low - Männer_high
SDI_Männer
Rsqu_Männer <- summary(mod_Männer)$r.squared
Rsqu_Männer
###Tabelle
tab <- matrix(c(SDI_Frauen, SDI_Männer, Rsqu_Frauen, Rsqu_Männer), nrow = 2, ncol = 2, byrow = T)
colnames(tab) <- c("Frauen", "Männer")
rownames(tab) <- c("SDI", "R-squared")
tab
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse") # Tidyverse Methods
library("bookdown")
library("readxl") # Read Excel
library("zoo")
library("imputeTS") # Impute Missing Features
library("haven") # write Stata-dta
library("sf") # write Stata-dta
library(pastecs) # descriptive stats
##an Niels: Komplettes Script ausführen, Tabelle in Console am Ende gibt die Werte aus
###Daten Einlesen
dat_2022 <- read.csv("Outfiles/2022/Bund/Gemeinde/Gemeinde.csv") %>% mutate(Kreis = floor(Gemeindekennziffer/1000))
Lebenserwartung_Frauen <- read_excel("Data/Lebenserwartung/Lebenserwartung_female_13_17.xlsx", skip = 1, sheet = "Daten")
names(Lebenserwartung_Frauen)[1] <- "Kreis"
Lebenserwartung_Frauen[2:3] <- NULL
Lebenserwartung_Frauen <- Lebenserwartung_Frauen %>% gather(key = "Jahr", value = "Value" , -"Kreis", convert=T, na.rm = T) %>% mutate(Kreis = as.numeric(Kreis))
Lebenserwartung_Frauen <- Lebenserwartung_Frauen %>% filter(Jahr > 2014) %>% group_by(Kreis) %>% mutate(Lebenserwartung_Frauen_2016 = mean(Value)) %>% ungroup() %>% filter(Jahr == 2016) %>% select(Kreis,Lebenserwartung_Frauen_2016)
Lebenserwartung_Männer <- read_excel("Data/Lebenserwartung/Lebenserwartung_male_13_17.xlsx", skip = 1, sheet = "Daten")
names(Lebenserwartung_Männer)[1] <- "Kreis"
Lebenserwartung_Männer[2:3] <- NULL
Lebenserwartung_Männer <- Lebenserwartung_Männer %>% gather(key = "Jahr", value = "Value" , -"Kreis", convert=T, na.rm = T) %>% mutate(Kreis = as.numeric(Kreis))
Lebenserwartung_Männer <- Lebenserwartung_Männer %>% filter(Jahr > 2014) %>% group_by(Kreis) %>% mutate(Lebenserwartung_Männer_2016 = mean(Value)) %>% ungroup() %>% filter(Jahr == 2016) %>% select(Kreis,Lebenserwartung_Männer_2016)
dat_Lebenserwartung <- Lebenserwartung_Frauen %>% left_join(Lebenserwartung_Männer, by = "Kreis")
dat_Leberw_2022 <- dat_2022 %>% filter(Jahr == 2016) %>% left_join(dat_Lebenserwartung, by = "Kreis") %>% distinct(Kreis, .keep_all = TRUE) %>% unique()
###Modelle erstellen
mod_Frauen <- lm(Lebenserwartung_Frauen_2016 ~ GISD_Score, data = dat_Leberw_2022)
summary(mod_Frauen)
mod_Männer <- lm(Lebenserwartung_Männer_2016 ~ GISD_Score, data = dat_Leberw_2022)
summary(mod_Frauen)
#Frauen
Frauen_high <- predict(mod_Frauen, data.frame(GISD_Score = 1))
Frauen_high
Frauen_low <- predict(mod_Frauen, data.frame(GISD_Score = 0))
Frauen_low
SDI_Frauen <- Frauen_low - Frauen_high
SDI_Frauen
Rsqu_Frauen <- summary(mod_Frauen)$r.squared
Rsqu_Frauen
#Männer
Männer_high <- predict(mod_Männer, data.frame(GISD_Score = 1))
Männer_high
Männer_low <- predict(mod_Männer, data.frame(GISD_Score = 0))
Männer_low
SDI_Männer <- Männer_low - Männer_high
SDI_Männer
Rsqu_Männer <- summary(mod_Männer)$r.squared
Rsqu_Männer
###Tabelle
tab <- matrix(c(SDI_Frauen, SDI_Männer, Rsqu_Frauen, Rsqu_Männer), nrow = 2, ncol = 2, byrow = T)
colnames(tab) <- c("Frauen", "Männer")
rownames(tab) <- c("SDI", "R-squared")
tab
>>>>>>> a2a58bc7b5a6ef96d36d4038bf240bdc769bf70a
